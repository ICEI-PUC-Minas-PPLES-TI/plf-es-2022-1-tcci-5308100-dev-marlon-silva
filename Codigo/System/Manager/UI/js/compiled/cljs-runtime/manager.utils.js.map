{"version":3,"sources":["manager/utils.cljs"],"mappings":"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","names":["manager.utils/maybe-parse-int","val","cljs.core/int?","js/parseInt","manager.utils/format-type","type","cljs.core/vector?","p1__26615#","p2__26614#","cljs.core.reduce","cljs.core/List","cljs.core.keyword","cljs.core/last","cljs.core.mapv","cljs.core/symbol","cljs.core/reverse","cljs.core/butlast","manager.utils/maybe-format-values","m","G__26618","p1__26616#","cljs.core.comp","cljs.core.update","cljs.core.partial","cljs.core/mapv","cljs.core/keyword","cljs.core/string?","cljs.core.update_in","p1__26617#","manager.utils/->edn","data","p1__26619#","clojure.walk/postwalk","cljs.core/map?","manager.utils/available?","k","cljs.core/tree-seq","cljs.core/vals","cljs.core.filter","cljs.core/some","manager.utils/referenced?","p1__26620#","cljs.core/contains?","cljs.core/set","cljs.core/flatten","manager.utils/active-panel?","active-panel","panel","clojure.string/includes?","cljs.core/name","manager.utils/panel->vector","clojure.string.split","manager.utils/filter-characteres","t","clojure.string/trim","p1__26621#","cljs.core/re-matches","clojure.string.join","manager.utils/drop-nth","coll","n","cljs.core/vec","p1__26622#","p2__26623#","cljs.core.keep_indexed","cljs.core.not_EQ_","manager.utils/field-resolve->internal","cljs.core.assoc","cljs.core.get_in","cljs.core.dissoc","manager.utils/maybe-format-resource","G__26626","p1__26624#","p1__26625#","cljs.core/PersistentVector","clojure.string/join","clojure.string/upper-case","manager.utils/wire->internal","p1__26627#","manager.utils/sort-types-comparator","t1","t2","order","t1-weight","cljs.core.get","t2-weight","cljs.core/compare","manager.utils/field-resolve->wire","response-path","manager.utils/maybe-prepare-json","G__26630","cljs.core/set?","p1__26628#","cljs.core.sort","cljs.core/empty?","cljs.core/some?","clojure.string/blank?","cljs.core/not","p1__26629#","cljs.core.map","clojure.string/lower-case","manager.utils/internal->wire","p1__26631#","manager.utils/valid-resource?","resource","kind","schema.core/check","G__26632","cljs.core/Keyword","manager.validations/Object","manager.validations/InputObject","manager.validations/Interface","manager.validations/Union","manager.validations/Enum","manager.validations/Query","manager.validations/Mutation","manager.validations/Source","manager.validations/Config"],"sourcesContent":["(ns manager.utils\n  (:require [clojure.walk :as w]\n            [schema.core :refer [check]]\n            [manager.validations :as v]\n            [clojure.string :as s]))\n\n(defn- maybe-parse-int [val] (if (int? (js/parseInt val)) (js/parseInt val) val))\n\n(defn- format-type [type]\n  (let [type (if (vector? type) type [type])]\n    (reduce #(list %2 %1) (keyword (last type)) (mapv symbol (reverse (butlast type))))))\n\n(defn- maybe-format-values [m]\n  (cond-> m\n    ((comp #(or (string? %) (vector? %)) :type) m) (update :type format-type)\n    ((comp vector? :implements) m) (update :implements (partial mapv keyword))\n    ((comp vector? :members) m) (update :members (partial mapv keyword))\n    ((comp string? :env) m) (update :env keyword)\n    ((comp string? :method) m) (update :method keyword)\n    ((comp string? :resolve) m) (update :resolve keyword)\n    ((comp vector? :resolve) m) (-> (update-in [:resolve 0] keyword)\n                                    (update-in [:resolve 1] keyword)\n                                    (update-in [:resolve 2] (partial mapv #(if-not (int? %) (keyword %) %))))))\n\n(defn ->edn [data]\n  (w/postwalk #(if (map? %) (maybe-format-values %) %) data))\n\n(defn available? [m k]\n  (->> (tree-seq map? vals m)\n       (filter map?)\n       (some k)\n       (nil?)))\n\n(defn referenced? [m val]\n  (->> (tree-seq map? vals m)\n       (filter map?)\n       (some #(contains? (set (flatten (vals %))) val))))\n\n(defn active-panel? [active-panel panel]\n  (when (s/includes? (name active-panel) (name panel)) :active))\n\n(defn panel->vector [panel]\n  (mapv keyword (s/split (name panel) #\"_\")))\n\n(defn filter-characteres [t]\n  (->> (s/trim t)\n       (filter #(re-matches #\"(\\w|-|\\?|>|<|\\!)\" %))\n       (s/join)))\n\n(defn drop-nth [coll n]\n  (vec (keep-indexed #(when (not= %1 n) %2) coll)))\n\n(defn- field-resolve->internal [m]\n  (-> m\n      (assoc :response-path (s/join \" > \" (get-in m [:resolve 2])))\n      (assoc :source (get-in m [:resolve 1]))\n      (dissoc :resolve)))\n\n(defn- maybe-format-resource [m]\n  (cond-> m\n    ((comp #(or (string? %) (vector? %)) :type) m) (update :type #(-> % vector flatten set))\n    ((comp vector? :cors) m) (update :cors (partial s/join \", \"))\n    ((comp vector? :resolve) m) (field-resolve->internal)\n    ((comp string? :method) m) (update :method s/upper-case)))\n\n(defn wire->internal [m]\n  (w/postwalk #(if (map? %) (maybe-format-resource %) %) m))\n\n(defn- sort-types-comparator [t1 t2]\n  (let [order {\"non-null\" 1 \"list\" 2}\n        t1-weight (get order t1 3)\n        t2-weight (get order t2 3)]\n    (compare t1-weight t2-weight)))\n\n(defn- field-resolve->wire [m]\n  (let [response-path (->> (s/split (:response-path m) #\">\") (mapv (comp maybe-parse-int s/trim)))]\n    (-> (assoc m :resolve [:get-in (:source m) response-path])\n        (dissoc :source :response-path))))\n\n(defn- maybe-prepare-json [m]\n  (cond-> m\n    ((comp set? :type) m) (update :type #(->> (vec %) (sort sort-types-comparator)))\n    ((comp empty? :implements) m) (dissoc :implements)\n    ((comp some? :isDeprecated) m) (dissoc :isDeprecated)\n    ((comp string? :response-path) m) (field-resolve->wire)\n    ((comp s/blank? :cors) m) (dissoc :cors)\n    ((comp not s/blank? :cors) m) (update :cors #(map s/trim (s/split % #\",\")))\n    ((comp string? :method) m) (update :method s/lower-case)))\n\n(defn internal->wire [m]\n  (w/postwalk #(if (map? %) (maybe-prepare-json %) %) m))\n\n(defn valid-resource? [resource kind]\n  (nil? (check\n         (case kind\n           :objects v/Object\n           :input-objects v/InputObject\n           :interfaces v/Interface\n           :unions v/Union\n           :enums v/Enum\n           :queries v/Query\n           :mutations v/Mutation\n           :sources v/Source\n           v/Config)\n         resource)))\n"]}
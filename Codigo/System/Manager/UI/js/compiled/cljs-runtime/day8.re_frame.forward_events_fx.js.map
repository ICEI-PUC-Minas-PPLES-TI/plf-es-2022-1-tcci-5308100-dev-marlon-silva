{"version":3,"sources":["day8/re_frame/forward_events_fx.cljs"],"mappings":";AAIA;;;;;;;mDAAA,nDAAMA,8GAMHC;AANH,AAOE,oBAAMA;AAAN,AACE,GAAM,AAACC,oBAAID;AAAeA;;AAA1B,GACM,0BAAAE,zBAAUF;AAAe,kBAAAG;AAAA,AAAA,IAAAC,aAAAD;eAAA,AAAAE,4CAAAD,WAAA,IAAA,tEAAME;QAAN,AAAAD,4CAAAD,WAAA,IAAA,/DAAeG;AAAf,AACE,OAACC,6CAAER,cAAcM;;;AAFlD,GAGM,AAACG,sBAAMT;AAAe,kBAAKU;AAAL,AACE,OAACF,6CAAER,cAAcU;;;AAJ/C,AAKY,MACE,mNAAA,2CAAA,9PAACC,gDAAQ,6HAAA,5HAAK,AAACC,wGAAOZ,0KAEJA;;;;;;AATlC;;;AAYF,qBAAA,rBAACa,8FAEC,iBAAMC,oBAAkB,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;QAAAA,JAAUG;iBAAV,AAAAD,4CAAAF,eAAA,xEAAmBI;eAAnB,AAAAF,4CAAAF,eAAA,tEAA8BK;aAA9B,AAAAH,4CAAAF,eAAA,pEAAuCM;kBAAvC,AAAAJ,4CAAAF,eAAA,zEAA8CO;AAA9C,AACE,IAAMhB,IAAE,2BAAA,KAAA,AAAA,kBAAA,KAAAiB,MAAA,CAAA,oKAAA,KAAA,rOAAQ,AAACC,qBAAKN,yDAAG,CAAA,oIAA6FA;IAChHZ,QAAE,wnBAAA,KAAA,AAAA,kBAAA,KAAAiB,MAAA,CAAA,gLAAA,KAAA,90BAAQ,EAAI,6CAAA,iFAAA,9HAAChB,mNAAiB,cAAA,eAAIW,fAAEO,dAAKC,uCAC7B,6CAAA,iFAAA,8DAAA,wEAAA,pQAACnB,qVAAoC,cAAA,eAAIW,fAAEO,dAAKC,0FAAO,CAAA,iHAA0E,cAAA,eAAIR,fAAEO,dAAKC;AAFhK,AAGE,oBAAIP;AACF,OAACQ,yCAAoCR;;AACrC,IAAMS,eAAuB,AAACC,4CAAI/B,iDAAiBuB;IAC7CS,yBAAuB,WAAKrB,QAAQH;AAAb,AACE,oBAAM,AAACyB,eAAK,WAAKC;AAAL,AAAW,QAACA,qCAAAA,8CAAAA,XAAKvB,0BAAAA;GACjBmB;AADZ,AAEE,OAACK,uBAAkB,AAACC,6CAAKZ,YAAYb;;AAFvC;;;AAF/B,AAKE,OAAC0B,oEAAiCf,SAASU;;;AAX3E,AAYE,kBAAKM;AAAL,AACE,GACE,AAACZ,qBAAKY;AAAK,OAACvB,kBAAkBuB;;AADhC,GAEE,AAACC,4BAAYD;AAAK,OAACE,8CAAM,AAACT,4CAAIhB,kBAAkBuB;;AAFlD,AAGQ,kEAAA,yGAAA,pKAACG,kOAAsFH","names":["day8.re-frame.forward-events-fx/as-callback-pred","callback-pred","cljs.core/fn?","cljs.core/Keyword","p__23686","vec__23687","cljs.core.nth","event-id","_","cljs.core._EQ_","cljs.core/coll?","event-v","cljs.core.ex_info","cljs.core.pr_str","re-frame.core/reg-fx","process-one-entry","p__23690","map__23691","cljs.core/--destructure-map","cljs.core.get","m","unregister","register","events","dispatch-to","js/Error","cljs.core/map?","cljs.core/keys","cljs.core/set","re-frame.core/remove-post-event-callback","events-preds","cljs.core.map","post-event-callback-fn","cljs.core/some","pred","re-frame.core/dispatch","cljs.core.conj","re_frame.core.add_post_event_callback","val","cljs.core/sequential?","cljs.core.doall","re_frame.core.console"],"sourcesContent":["(ns day8.re-frame.forward-events-fx\n  (:require [re-frame.core :as re-frame]))\n\n\n(defn as-callback-pred\n  \"Looks at the required-events items and returns a predicate which\n  will either\n  - match only the event-keyword if a keyword is supplied\n  - match the entire event vector if a collection is supplied\n  - returns a callback-pred if it is a fn\"\n  [callback-pred]\n  (when callback-pred\n    (cond (fn? callback-pred) callback-pred\n          (keyword? callback-pred) (fn [[event-id _]]\n                                     (= callback-pred event-id))\n          (coll? callback-pred) (fn [event-v]\n                                  (= callback-pred event-v))\n          :else (throw\n                  (ex-info (str (pr-str callback-pred)\n                             \" isn't an event predicate\")\n                    {:callback-pred callback-pred})))))\n\n\n(re-frame/reg-fx\n  :forward-events\n  (let [process-one-entry (fn [{:as m :keys [unregister register events dispatch-to]}]\n                            (let [_ (assert (map? m) (str \"re-frame: effects handler for :forward-events expected a map or a list of maps. Got: \" m))\n                                  _ (assert (or (= #{:unregister} (-> m keys set))\n                                                (= #{:register :events :dispatch-to} (-> m keys set))) (str \"re-frame: effects handler for :forward-events given wrong map keys\" (-> m keys set)))]\n                              (if unregister\n                                (re-frame/remove-post-event-callback unregister)\n                                (let [events-preds           (map as-callback-pred events)\n                                      post-event-callback-fn (fn [event-v _]\n                                                               (when (some (fn [pred] (pred event-v))\n                                                                           events-preds)\n                                                                 (re-frame/dispatch (conj dispatch-to event-v))))]\n                                  (re-frame/add-post-event-callback register post-event-callback-fn)))))]\n    (fn [val]\n      (cond\n        (map? val) (process-one-entry val)\n        (sequential? val) (doall (map process-one-entry val))\n        :else (re-frame/console :error \":forward-events expected a map or a list of maps, but got: \" val)))))\n"]}
{"version":3,"sources":["manager/navigation.cljs"],"mappings":";AAIA,yDAAA,zDAACA,uHAEA,aAAAC,FAAKG;AAAL,AAAA,IAAAF,aAAAD;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAAQE;cAAR,AAAAD,4CAAAD,WAAA,IAAA,rEAAUG;AAAV,AAAA,kDAAA,4DACaA;;AAEd,yDAAA,zDAACL,sIAEA,WAAAM,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaI;IAAbD,aAAAJ;QAAA,AAAAJ,4CAAAQ,WAAA,IAAA,/DAAmBP;mBAAnB,AAAAD,4CAAAQ,WAAA,IAAA,1EAAqBE;AAArB,AACE,8GAAA,2CAAA,lJAACC,+RACSF,9CAAG,iDAAA,jDAACG,uHAAoBF,tKAAc,oLAAA,pLAACG,yPAChD,2HAAA,2CAAA,iEAAA,2CAAA,wEAAA,mFAAA,yFAAA,uDAAA,mFAAA,2CAAA,qDAAA,wDAAA,yDAAA,iGAAA,6DAAA,mFAAA,+EAAA,wDAAA,aAAA,2CAAA,qDAAA,wDAAA,yDAAA,iGAAA,6DAAA,iCAAA,wDAAA,qCAAA,gPAAA,KAAA,AAAA,2CAAA,kDAAA,mFAAA,mFAAA,6DAAA,mFAAA,z1EACE,0DAAA,1DAACC,6CAAEJ,sqDASH,EAAI,0DAAA,1DAACI,6CAAEJ,uEAAoB,0DAAA,1DAACI,6CAAEJ;;;AAGpC,2DAAA,3DAACK,0LAEA,WAAKN,GAAGR;AAAR,AACE,OAAA,oGAAeQ","names":["re_frame.core.reg_event_fx","p__25935","vec__25936","cljs.core.nth","_","handler","p__25944","p__25945","map__25946","cljs.core/--destructure-map","cljs.core.get","vec__25947","db","active-panel","cljs.core.merge","cljs.core.assoc","cljs.core.dissoc","cljs.core._EQ_","re_frame.core.reg_sub"],"sourcesContent":["(ns manager.navigation\n  (:require [re-frame.core :as rf]\n            [day8.re-frame.async-flow-fx]))\n\n(rf/reg-event-fx\n :redirect\n (fn [_ [_ handler]]\n   {:navigate handler}))\n\n(rf/reg-event-fx\n :set-active-panel\n (fn [{:keys [db]} [_ active-panel]]\n   (merge\n    {:db (-> db (assoc :active-panel active-panel) (dissoc :resource))}\n    (cond\n      (= active-panel :settings) {:async-flow {:first-dispatch [:load-all-resources]\n                                               :rules [{:when :seen?\n                                                        :events :load-all-resources-success\n                                                        :dispatch [:select-config]\n                                                        :halt? true}\n                                                       {:when :seen?\n                                                        :events :load-all-resources-failure\n                                                        :dispatch []\n                                                        :halt? true}]}}\n      (or (= active-panel :home) (= active-panel :schemas)) nil\n      :else {:fx [[:dispatch [:load-all-resources]]]}))))\n\n(rf/reg-sub\n :get-active-panel\n (fn [db _]\n   (:active-panel db)))\n"]}
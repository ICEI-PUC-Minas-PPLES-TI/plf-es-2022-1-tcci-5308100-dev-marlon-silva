{"version":3,"sources":["manager/views/schemas/inputs.cljs"],"mappings":";AAKA,0CAAA,1CAAMA,4FAAYC;AAAlB,AAAA,2BAAA,mHAAA,8KAAA,sHAAA,oEAAA,4BAAA,kIAAA,qDAAA,QAAA,mFAAA,yDAAA,wDAAA,qEAAA,oBAAA,oHAAA,qDAAA,OAAA,oBAAA,2CAAA,oDAAA,6DAAA,oBAAA,oHAAA,qDAAA,WAAA,wBAAA,2CAAA,oDAAA,6EAAA,sHAAA,sEAAA,8BAAA,kIAAA,iEAAA,cAAA,0EAAA,oBAAA,mFAAA,oFAAA,kHAAA,2CAAA,uDAAA,4DAAA,uDAAA,iBAAA,0JAAA,2CAAA,oDAAA,mFAAA,2CAAA,oDACS,AAACC,eAAKD,9iGACZE,mHACCC,sCAAmB,AAACF,eAAKD,MAAM,AAACI,kBAAQJ,iGACxCK,sHAA4CL,gGAC5CM,gXAAmEN,4GACpDO,oGAAkCP,gRAC9BO,4GAA0CP,4QAC7DK,0HAAgDL,gGAChDQ,mMAAoER,mRAGlES,kWAC0B,AAACL,kBAAQJ,MAAM,AAACC,eAAKD;;AAErD,AAAAU,4EAAA,wDAAA;AAAA,AACE,gBAAA,mFAAA,qDAAA,pJAAMC;IACAC,SAAO,AAACC,4CAAIC,gBAAM,+CAAA,AAAAC,mPAAA,lSAACC,+DAAQ,sDAAA,mFAAA,zIAACC,yNAA8BN;AADhE,AAAA,2HAAA,0HAAA,kHAAA,KAAA,sHAAA,gBAAA,sHAAA,oEAAA,4DAAA,+GAAA,yDAAA,mFAAA,iDAAA,mFAAA,4EAAA,0BAAA,kHAAA,2CAAA,uDAAA,qDAAA,uDAAA,cAAA,uFAAA,0EAAA,wHAAA,1tDAEGO,oHACCC,0HACAC,uHACCC,sIACAhB,sHAA4CiB,gIAC7CC,qeAECd,+eACDe,qFAAsB,4CAAA,WAAAC,vDAACZ;AAAD,AAAM,OAACd,wCAAW,uDAAA0B,vDAACC,6CAAKf;iEAVlD,9DAUgE,AAACgB,6CAAKf,oGAClEgB","names":["manager.views.schemas.inputs/field-form","path","cljs.core/last","manager.components.form/subform","manager.components.form/subname-input","cljs.core/butlast","manager.components.form/text-input","manager.components.form/composite-select-input","manager.components.form/checkbox","manager.components.form/text-input-with-toggle","manager.components.form/button","manager.views.schemas.core/form","base-path","fields","cljs.core.map","cljs.core/first","cljs.core/deref","cljs.core.get_in","re_frame.core.subscribe","manager.components.form/scaffold","manager.components.form/header","manager.components.form/inputs","manager.components.form/name-input","manager.components.form/root","manager.components.form/row","manager.components.form/subform-list","p1__27136#","cljs.core.conj","cljs.core.sort","manager.components.form/footer"],"sourcesContent":["(ns manager.views.schemas.inputs\n  (:require [re-frame.core :as rf]\n            [manager.components.form :as form]\n            [manager.views.schemas.core :as schemas]))\n\n(defn field-form [path]\n  ^{:key (last path)}\n  [form/subform\n   [form/subname-input (last path) (butlast path)]\n   [form/text-input :description \"Description:\" path]\n   [form/composite-select-input :type \"Type:\" [:scalar :inputs :enums] path\n    ^{:key :list} [form/checkbox :type \"List\" \"list\" path]\n    ^{:key :non-null} [form/checkbox :type \"Required\" \"non-null\" path]]\n   [form/text-input :default-value \"Default Value:\" path]\n   [form/text-input-with-toggle :deprecated \"Deprecated:\" :isDeprecated path\n    ^{:key :delete}\n    [:span.input-group-btn\n     [form/button {:style :warning :label \"Delete\"}\n      :delete-resource-property (butlast path) (last path)]]]])\n\n(defmethod schemas/form :inputs []\n  (let [base-path [:data :fields]\n        fields (map first (get-in @(rf/subscribe [:get-resource]) base-path {}))]\n    [form/scaffold\n     [form/header]\n     [form/inputs nil\n      [form/name-input \"Input\"]\n      [form/text-input :description \"Description:\" form/root]]\n     [form/row :middle\n      [:h4 [:span.page-header \"Fields:\"]]\n      [form/button {:style :info :label \"Add\"} :new-resource-property :fields]]\n     [form/subform-list :lg (map #(field-form (conj base-path %)) (sort fields))]\n     [form/footer]]))\n"]}
{"version":3,"sources":["manager/server.cljs"],"mappings":";AAUA,sCAAA,tCAAMA;AAAN,AAEE,IAAMC,MAAI,KAAAC;AAAV,AACE,8BAAA,mFAAA,1GAACC,kKAAoBF;;AAKzB,GAAA,QAAAG,oCAAAC,2CAAAC;AAAA;AAAA,AAAA,AAASC,0BAAS,gDAAA,hDAACC,YAAeR;;AAKlC,yDAAA,zDAACS,yHAEA,WAAKC,EAAEA;AAAP,AAAA,kDAAA,kEAAA,kEAAA,/EACS,KAAAR;;AAIV,yDAAA,zDAACO,wIAEA,cAAAE,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASF;sBAAT,AAAAG,4CAAAD,WAAA,IAAA,7EAAWG;AAAX,AACE,wDAAA,jDAACC,8CAAMF,qEAAeC;;AAGzB,yDAAA,zDAACN,iHAEA,cAAAQ,HAAKH;AAAL,AAAA,IAAAI,aAAAD;QAAA,AAAAJ,4CAAAK,WAAA,IAAA,/DAASR;eAAT,AAAAG,4CAAAK,WAAA,IAAA,tEAAWC;AAAX,AACE,wDAAA,jDAACH,8CAAMF,wDAASK;;AAKnB,2DAAA,3DAACC,kKAEA,WAAKN,GAAGJ;AAAR,AACE,OAAA,mFAAOI;;AAEV,2DAAA,3DAACM,+KAEA,WAAKN,GAAGJ;AAAR,AACE,OAAA,gGAAaI;;AAKhB,uBAAA,vBAAMQ;AAAN,AAAA,0FAAA,+EAAA,2CAAA,uDAAA,2CAAA,uDAAA,AAAAD,gBAGoB,sDAAA,mFAAA,zIAACE,qOAClB,mFAAK,sDAAA,mFAAA,zIAACA,nEAEF,mDAAA,AAAA,AAAAF,uOAAA,1RAACG,hBACDC;;AAEP,6BAAA,7BAAME;AAAN,AAAA,0FAAA,2EAAA,eAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,sDAAA,AAAAN,qOAAA,+DAAA,WAAAK,/RAKoB,sDAAA,mFAAA,zIAACH;AALrB,AAMwB,8BAAA,mFAAA,1GAACpB,yLAAgC,AAAA,AAAAuB;;;AAEzD,oBAAA,pBAAME;AAAN,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,iCAAA,gHAAA,7BAIIN,gHACAK;;AAIJ,wBAAA,xBAAME;AAAN,AAEE,wDAAA,jDAACC,oIAAoBF,0BACD,wBAAA,xBAACG;;AAEvB,8CAAA,9CAAuBC;AAAvB,AAKE,AAACC;;AACD,OAACJ;;AAEH,sBAAA,tBAAMK;AAAN,AAEE,4BAAA,mFAAA,/GAACC;;AACD,OAACN","names":["manager.server/dispatch-timer-event","now","js/Date","re-frame.core/dispatch","js/manager","js/manager.server","js/manager.server.do-timer","manager.server/do-timer","js/setInterval","re_frame.core.reg_event_db","_","p__25864","vec__25865","cljs.core.nth","db","new-color-value","cljs.core.assoc","p__25868","vec__25869","new-time","re_frame.core.reg_sub","cljs.core/deref","manager.server/clock","re_frame.core.subscribe","clojure.string.split","cljs.core/first","p1__25872#","manager.server/color-input","manager.server/ui","manager.server/render","reagent.dom.render","js/document.getElementById","manager.server/clear-cache-and-render!","re-frame.core/clear-subscription-cache!","manager.server/init","re-frame.core/dispatch-sync"],"sourcesContent":["(ns manager.server\n  (:require [reagent.dom]\n            [re-frame.core :as rf]\n            [clojure.string :as str]))\n\n;; A detailed walk-through of this source code is provided in the docs:\n;; https://day8.github.io/re-frame/dominoes-live/\n\n;; -- Domino 1 - Event Dispatch -----------------------------------------------\n\n(defn dispatch-timer-event\n  []\n  (let [now (js/Date.)]\n    (rf/dispatch [:timer now])))  ;; <-- dispatch used\n\n;; Call the dispatching function every second.\n;; `defonce` is like `def` but it ensures only one instance is ever\n;; created in the face of figwheel hot-reloading of this file.\n(defonce do-timer (js/setInterval dispatch-timer-event 1000))\n\n\n;; -- Domino 2 - Event Handlers -----------------------------------------------\n\n(rf/reg-event-db              ;; sets up initial application state\n :initialize                 ;; usage:  (dispatch [:initialize])\n (fn [_ _]                   ;; the two parameters are not important here, so use _\n   {:time (js/Date.)         ;; What it returns becomes the new application state\n    :time-color \"#f88\"}))    ;; so the application state will initially be a map with two keys\n\n\n(rf/reg-event-db                ;; usage:  (dispatch [:time-color-change 34562])\n :time-color-change            ;; dispatched when the user enters a new colour into the UI text field\n (fn [db [_ new-color-value]]  ;; -db event handlers given 2 parameters:  current application state and event (a vector)\n   (assoc db :time-color new-color-value)))   ;; compute and return the new application state\n\n\n(rf/reg-event-db                 ;; usage:  (dispatch [:timer a-js-Date])\n :timer                         ;; every second an event of this kind will be dispatched\n (fn [db [_ new-time]]          ;; note how the 2nd parameter is destructured to obtain the data value\n   (assoc db :time new-time)))  ;; compute and return the new application state\n\n\n;; -- Domino 4 - Query  -------------------------------------------------------\n\n(rf/reg-sub\n :time\n (fn [db _]     ;; db is current app state. 2nd unused param is query vector\n   (:time db))) ;; return a query computation over the application state\n\n(rf/reg-sub\n :time-color\n (fn [db _]\n   (:time-color db)))\n\n\n;; -- Domino 5 - View Functions ----------------------------------------------\n\n(defn clock\n  []\n  [:div.example-clock\n   {:style {:color @(rf/subscribe [:time-color])}}\n   (-> @(rf/subscribe [:time])\n       .toTimeString\n       (str/split \" \")\n       first)])\n\n(defn color-input\n  []\n  [:div.color-input\n   \"Time color: \"\n   [:input {:type \"text\"\n            :value @(rf/subscribe [:time-color])\n            :on-change #(rf/dispatch [:time-color-change (-> % .-target .-value)])}]])  ;; <---\n\n(defn ui\n  []\n  [:div\n   [:h1 \"Hello world, it is now\"]\n   [clock]\n   [color-input]])\n\n;; -- Entry Point -------------------------------------------------------------\n\n(defn render\n  []\n  (reagent.dom/render [ui]\n                      (js/document.getElementById \"app\")))\n\n(defn ^:dev/after-load clear-cache-and-render!\n  []\n  ;; The `:dev/after-load` metadata causes this function to be called\n  ;; after shadow-cljs hot-reloads code. We force a UI update by clearing\n  ;; the Reframe subscription cache.\n  (rf/clear-subscription-cache!)\n  (render))\n\n(defn init\n  []\n  (rf/dispatch-sync [:initialize]) ;; put a value into application state\n  (render))                         ;; mount the application's ui into '<div id=\"app\" />'\n\n"]}
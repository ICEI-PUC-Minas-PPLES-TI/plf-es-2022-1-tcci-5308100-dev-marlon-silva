{"version":3,"sources":["manager/validations.cljs"],"mappings":"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","names":["manager.validations/non-blank","value","schema.core.conditional","cljs.core.comp","cljs.core/not","clojure.string/blank?","manager.validations/non-empty","cljs.core/not-empty","manager.validations/valid-type","p1__26593#","cljs.core.disj","manager.validations/resource","required?","data","schema.core/required-key","schema.core/Keyword","schema.core/optional-key","schema.core/maybe","schema.core/Str","cljs.core.vary_meta","schema.core/schema-with-name","cljs.core/assoc","manager.validations/Object","schema.core/Bool","manager.validations/InputObject","manager.validations/Interface","manager.validations/Union","manager.validations/Enum","manager.validations/Source","manager.validations/Query","manager.validations/Mutation","manager.validations/Config"],"sourcesContent":["(ns manager.validations\n  (:require [clojure.string :as string]\n            [schema.core :as schema :refer [optional-key required-key conditional]]))\n\n(defn- non-blank [value]\n  (conditional (comp not string/blank?) value))\n\n(defn- non-empty [value]\n  (conditional not-empty value))\n\n(defn- valid-type [value]\n  (conditional #(not-empty (disj % \"non-null\" \"list\")) value))\n\n(defn resource [required? data]\n  (non-empty\n   {(required-key :path) [schema/Keyword]\n    (optional-key :old-name) (schema/maybe schema/Str)\n    (required-key :name) (non-blank schema/Str)\n    (required-key :data) (if required? (non-empty data) data)}))\n\n(schema/defschema Object\n  (resource true\n            {(optional-key :description) schema/Str\n             (optional-key :implements) [schema/Str]\n             (required-key :fields)\n             (non-empty {schema/Keyword {(optional-key :description) schema/Str\n                                         (required-key :type) (valid-type #{schema/Str})\n                                         (optional-key :source) schema/Str\n                                         (optional-key :response-path) schema/Str\n                                         (optional-key :isDeprecated) schema/Bool\n                                         (optional-key :deprecated) schema/Str}})}))\n\n(schema/defschema InputObject\n  (resource true\n            {(optional-key :description) schema/Str\n             (required-key :fields)\n             (non-empty {schema/Keyword {(optional-key :description) schema/Str\n                                         (required-key :type) (valid-type #{schema/Str})\n                                         (optional-key :default-value) schema/Str\n                                         (optional-key :isDeprecated) schema/Bool\n                                         (optional-key :deprecated) schema/Str}})}))\n\n(schema/defschema Interface\n  (resource true\n            {(optional-key :description) schema/Str\n             (required-key :fields)\n             (non-empty {schema/Keyword {(optional-key :description) schema/Str\n                                         (required-key :type) (valid-type #{schema/Str})\n                                         (optional-key :isDeprecated) schema/Bool\n                                         (optional-key :deprecated) schema/Str}})}))\n\n(schema/defschema Union\n  (resource true\n            {(optional-key :description) schema/Str\n             (required-key :members) (non-empty #{schema/Str})}))\n\n(schema/defschema Enum\n  (resource true\n            {(optional-key :description) schema/Str\n             (required-key :values)\n             (non-empty [{(required-key :enum-value) (non-blank schema/Str)\n                          (optional-key :description) schema/Str\n                          (optional-key :isDeprecated) schema/Bool\n                          (optional-key :deprecated) schema/Str}])}))\n\n(schema/defschema Source\n  (resource true\n            {(optional-key :description) schema/Str\n             (required-key :method) (non-blank schema/Str)\n             (required-key :uri) (non-blank schema/Str)}))\n\n(schema/defschema Query\n  (resource true\n            {(optional-key :description) schema/Str\n             (required-key :type) (valid-type #{schema/Str})\n             (required-key :resolve) schema/Str\n             (optional-key :args)\n             {schema/Keyword {(required-key :type) (valid-type #{schema/Str})}}}))\n\n(schema/defschema Mutation\n  (resource true\n            {(optional-key :description) schema/Str\n             (required-key :type) (valid-type #{schema/Str})\n             (required-key :resolve) schema/Str\n             (required-key :args)\n             (non-empty {schema/Keyword {(required-key :type) (valid-type #{schema/Str})}})}))\n\n(schema/defschema Config\n  (resource false\n            {(optional-key :name) schema/Str\n             (optional-key :description) schema/Str\n             (optional-key :api-path) schema/Str\n             (optional-key :ide-path) schema/Str\n             (optional-key :env) schema/Str\n             (optional-key :host) schema/Str\n             (optional-key :port) schema/Str\n             (optional-key :cors) schema/Str}))\n"]}
{"version":3,"sources":["manager/handlers.cljs"],"mappings":"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","names":["p__26828","vec__26829","cljs.core.nth","manager.handlers/load-all-resources-success","db","_","response","resource-path","cljs.core.get_in","cljs.core.assoc","cljs.core/assoc-in","cljs.core.update","cljs.core/merge","cljs.core.map","cljs.core.comp","cljs.core/name","cljs.core/first","cljs.core.get","p__26834","vec__26835","manager.handlers/load-all-resources-failure","error","cljs.core/select-keys","p__26838","vec__26839","manager.handlers/save-resource-success","cljs.core/assoc","p__26846","vec__26847","manager.handlers/save-resource-failure","p__26850","vec__26851","manager.handlers/delete-resource-success","p__26854","vec__26855","manager.handlers/delete-resource-failure","manager.handlers/reload-resources","manager.handlers/new-resource","p__26861","vec__26862","manager.handlers/new-resource-property","kind","index?","path","kind-name","element-name","cljs.core.subs","cljs.core/count","cljs.core.update_in","cljs.core.fnil","cljs.core/conj","cljs.core.keyword","p__26865","vec__26866","manager.handlers/delete-resource-property","key","cljs.core.apply","cljs.core/vector","manager.utils/drop-nth","cljs.core/dissoc","manager.handlers/get-resource","manager.handlers/get-resource-list","p__26869","vec__26871","manager.handlers/get-names","kinds","manager.handlers/get-result","manager.handlers/delete-result","cljs.core.dissoc","p__26878","vec__26879","seq__26880","cljs.core/seq","first__26881","cljs.core/next","manager.handlers/update-resource","function","args","cljs.core/vec","cljs.core/cons","cljs.core.partial","cljs.core/apply","p__26883","vec__26885","manager.handlers/select-resource","resource-name","manager.utils/wire->internal","G__26888","manager.handlers/check-resource","manager.utils/valid-resource?","cljs.core/last","manager.handlers/select-config"],"sourcesContent":["(ns manager.handlers\n  (:require [manager.utils :as u]))\n\n(defn load-all-resources-success\n  [db [_ response]]\n  (let [resource-path (get-in db [:panel->path (:active-panel db)])]\n    (-> (assoc db :resource-list (get-in response resource-path {}))\n        (assoc-in [:resource :path] resource-path)\n        (update :names merge {:types       (map (comp name first) (get-in response [:graphql :objects]))\n                              :interfaces  (map (comp name first) (get-in response [:graphql :interfaces]))\n                              :inputs      (map (comp name first) (get-in response [:graphql :input-objects]))\n                              :enums       (map (comp name first) (get-in response [:graphql :enums]))\n                              :unions      (map (comp name first) (get-in response [:graphql :unions]))\n                              :mutations   (map (comp name first) (get-in response [:graphql :mutations]))\n                              :queries     (map (comp name first) (get-in response [:graphql :queries]))\n                              :sources     (map (comp name first) (get response :sources))}))))\n\n(defn load-all-resources-failure\n  [db [_ error]]\n  (assoc db :result (-> error\n                        (select-keys [:status-text :response])\n                        (assoc :type :error))))\n\n(defn save-resource-success\n  [db [_ response]]\n  (-> (update db :resource assoc :old-name (-> db :resource :name))\n      (assoc :result {:response response :type :success})))\n\n(defn save-resource-failure\n  [db [_ error]]\n  (assoc db :result (-> error\n                        (select-keys [:status-text :response])\n                        (assoc :type :error))))\n\n(defn delete-resource-success\n  [db [_ response]]\n  (assoc db\n         :result {:response response :type :success}\n         :resource {:path (get-in db [:panel->path (:active-panel db)])\n                    :old-name nil}))\n\n(defn delete-resource-failure\n  [db [_ error]]\n  (assoc db :result (-> error\n                        (select-keys [:status-text :response])\n                        (assoc :type :error))))\n\n(defn reload-resources\n  [_ _]\n  {:fx [[:dispatch [:load-all-resources]]]})\n\n(defn new-resource\n  [db _]\n  (assoc db :resource\n         {:path (get-in db [:panel->path (:active-panel db)])\n          :old-name nil}))\n\n(defn new-resource-property\n  [db [_ kind index?]]\n  (let [path [:resource :data kind]\n        kind-name (name kind)\n        element-name (str (subs kind-name 0 (dec (count kind-name)))\n                          (inc (count (get-in db path))))]\n    (if index?\n      (update-in db path (fnil conj []) {:enum-value element-name})\n      (update-in db path assoc (keyword element-name) {}))))\n\n(defn delete-resource-property\n  [db [_ path key index?]]\n  (if index?\n    (update-in db (apply vector :resource path) u/drop-nth key)\n    (update-in db (apply vector :resource path) dissoc key)))\n\n(defn get-resource\n  [db _]\n  (:resource db))\n\n(defn get-resource-list\n  [db _]\n  (:resource-list db))\n\n(defn get-names\n  [db [_ kinds]]\n  (select-keys (:names db) kinds))\n\n(defn get-result\n  [db _]\n  (:result db))\n\n(defn delete-result\n  [db _]\n  (dissoc db :result))\n\n(defn update-resource\n  [db [_ path function & args]]\n  (update-in db (vec (cons :resource path)) (partial apply function) args))\n\n(defn select-resource\n  [db [_ resource-name]]\n  (-> (dissoc db :result)\n      (assoc :resource {:path (get-in db [:panel->path (:active-panel db)])\n                        :old-name (name resource-name)\n                        :name (name resource-name)\n                        :data (u/wire->internal (-> db :resource-list resource-name))})))\n\n(defn check-resource\n  [db _]\n  (u/valid-resource? (:resource db) (-> db :resource :path last)))\n\n(defn select-config\n  [db _]\n  (assoc db :resource {:path []\n                       :old-name \"config\"\n                       :name \"config\"\n                       :data (u/wire->internal (:resource-list db))}))"]}
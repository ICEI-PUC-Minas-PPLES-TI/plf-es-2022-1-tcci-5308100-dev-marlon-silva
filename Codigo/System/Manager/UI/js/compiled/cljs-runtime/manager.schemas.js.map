{"version":3,"sources":["manager/schemas.cljs"],"mappings":"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","names":["manager.schemas/non-blank","value","schema.core.conditional","cljs.core.comp","cljs.core/not","clojure.string/blank?","manager.schemas/non-empty","cljs.core/not-empty","manager.schemas/valid-type","p1__25713#","cljs.core.disj","manager.schemas/new-resource","data","schema.core/required-key","schema.core/Keyword","schema.core/Str","cljs.core.vary_meta","schema.core/schema-with-name","cljs.core/assoc","manager.schemas/Object","schema.core/optional-key","schema.core/Bool","manager.schemas/InputObject","manager.schemas/Interface","manager.schemas/Union","manager.schemas/Enum","manager.schemas/Query","manager.schemas/Mutation"],"sourcesContent":["(ns manager.schemas\n  (:require [clojure.string :as string]\n            [schema.core :as schema :include-macros true\n             :refer [optional-key required-key conditional]]))\n\n(defn- non-blank [value]\n  (conditional (comp not string/blank?) value))\n\n(defn- non-empty [value]\n  (conditional not-empty value))\n\n(defn- valid-type [value]\n  (conditional #(not-empty (disj % \"non-null\" \"list\")) value))\n\n(defn new-resource [data]\n  {(required-key :path) [schema/Keyword]\n   (required-key :old-name) schema/Str\n   (required-key :name) schema/Str\n   (required-key :data) data})\n\n(schema/defschema Object\n  (new-resource\n   {(optional-key :description) schema/Str\n    (optional-key :implements) [schema/Str]\n    (required-key :fields)\n    (non-empty {schema/Keyword {(optional-key :description) schema/Str\n                                (required-key :type) (valid-type #{schema/Str})\n                                (optional-key :isDeprecated) schema/Bool\n                                (optional-key :deprecated) schema/Str}})}))\n\n(schema/defschema InputObject\n  (new-resource\n   {(optional-key :description) schema/Str\n    (required-key :fields)\n    (non-empty {schema/Keyword {(optional-key :description) schema/Str\n                                (required-key :type) (valid-type #{schema/Str})\n                                (optional-key :default-value) schema/Bool\n                                (optional-key :isDeprecated) schema/Bool\n                                (optional-key :deprecated) schema/Str}})}))\n\n(schema/defschema Interface\n  (new-resource\n   {(optional-key :description) schema/Str\n    (required-key :fields)\n    (non-empty {schema/Keyword {(optional-key :description) schema/Str\n                                (required-key :type) (valid-type #{schema/Str})}})}))\n\n(schema/defschema Union\n  (new-resource\n   {(optional-key :description) schema/Str\n    (optional-key :members) [schema/Str]}))\n\n(schema/defschema Enum\n  (new-resource\n   {(optional-key :description) schema/Str\n    (required-key :values)\n    (non-empty [{(optional-key :description) schema/Str\n                 (required-key :enum-value) (non-blank schema/Str)\n                 (optional-key :isDeprecated) schema/Bool\n                 (optional-key :deprecated) schema/Str}])}))\n\n(schema/defschema Query\n  (new-resource\n   {(optional-key :description) schema/Str\n    (required-key :source) schema/Str\n    (required-key :args)\n    (non-empty {schema/Keyword {(optional-key :description) schema/Str\n                                (required-key :type) (valid-type #{schema/Str})}})}))\n\n(schema/defschema Mutation\n  (new-resource\n   {(optional-key :description) schema/Str\n    (required-key :source) schema/Str\n    (required-key :args)\n    (non-empty {schema/Keyword {(optional-key :description) schema/Str\n                                (required-key :type) (valid-type #{schema/Str})}})}))\n"]}